{"version":3,"file":"static/js/539.ebdb0d88.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Form/ContactForm.module.css?cbfb","../node_modules/nanoid/index.browser.js","redux/contacts/selectors.jsx","components/Form/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactFilter/ContactFilter.module.css?a140","components/ContactFilter/ContactFilter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","HOC/WithAuthRedirect.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dULym\",\"label\":\"ContactForm_label__vDLxl\",\"input\":\"ContactForm_input__TWImw\",\"btn\":\"ContactForm_btn__QVKUX\",\"text\":\"ContactForm_text__abXj6\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.contacts.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getErrorMessage = state => state.contacts.error;\n\n\n\n","import { useState } from 'react';\nimport styles from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { addContact } from '../../redux/contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button } from '@mui/material';\n\nexport const ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n        case 'name':\n            setName(value);\n            break;\n        case 'number':\n            setNumber(value);\n            break;\n        default:\n            break;\n    }};\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        const isRepeated = contacts.find(\n            contact => contact.name.toLowerCase() === name.toLowerCase()\n        );\n        \n        if (isRepeated) {\n            alert(`${name} is already in contacts.`);\n            return;\n        }\n\n        dispatch(addContact({ name, number, id: nanoid() }));\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form className={styles.form} onSubmit={handleSubmit}>\n        <label className={styles.label}>\n            <p className={styles.text}>Name:</p>\n            <input\n            className={styles.input}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            placeholder='Enter username'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleChange}\n            />\n        </label>\n        <label className={styles.label}>\n            <p className={styles.text}>Phone number:</p>\n            <input\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder='(067) 111-22-33'\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n            />\n        </label>\n\n        <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2, ml: 1, color: '#fff', background: '#347474' }}\n          >\n            Add contact\n          </Button>\n\n        </form>\n    );\n}\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"ContactFilter_label__qRVzC\",\"input\":\"ContactFilter_input__8mWOi\"};","import React from 'react';\nimport styles from './ContactFilter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilterAction } from '../../redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\n\nexport const ContactFilter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n\n    return (\n        <label className={styles.label}>\n            <input\n            className={styles.input}\n            type=\"text\"\n            value={filter}\n            placeholder=\"Search contacts\"\n            onChange={(e) => dispatch(changeFilterAction(e.target.value)) }\n            />\n        </label>\n    );\n}\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"text\":\"ContactList_text__+NWAW\",\"btn\":\"ContactList_btn__6Piat\"};","import React from 'react';\nimport styles from './ContactList.module.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  let rendered = filter === '' ? contacts : filteredContacts();\n\n  return (\n    <ul className={styles.list}>\n      {rendered.map(({ id, name, number }) => (\n        <li className={styles.item} key={id}>\n          <p className={styles.text}>\n            {name}: {number}\n          </p>\n          <button\n            className={styles.btn}\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { selectIsLoggedIn, selectIsRefreshing } from '../redux/auth/selectors';\n\nexport const WithAuthRedirect = (Component, navigateTo) => {\n    const ProtectedComponent = props => {\n        const isLoggedIn = useSelector(selectIsLoggedIn);\n        const isRefreshing = useSelector(selectIsRefreshing);\n\n        return isLoggedIn &&!isRefreshing? (\n            <Component {...props} /> \n        ) : (\n            <Navigate to={navigateTo} />\n        );\n    };\n\n    return ProtectedComponent;\n};\n\nexport default WithAuthRedirect;","import { ContactForm } from 'components/Form/ContactForm';\nimport { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations'; \nimport { selectContacts, getIsLoading } from 'redux/contacts/selectors';\nimport WithAuthRedirect from 'HOC/WithAuthRedirect';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Loader } from 'components/Loader/Loader';\nimport styles from '../components/App/App.module.css'\n\nconst PageContacts = () => {\n  const loading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n  const contactsAdd = useSelector(selectContacts);\n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  \n  return (\n    <div className={styles.container}>\n      <ContactForm />\n        {contactsAdd.length === 0 ? (\n        <p>There is no contacts</p>\n      ) : (\n        <>\n          <ContactFilter />\n          <ContactList />\n        </>\n      )} \n        {loading && <Loader />}\n    </div>\n  );\n};\nconst ContactsPage = WithAuthRedirect(PageContacts, '/login');\nexport default ContactsPage;"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectFilter","filter","getIsLoading","isLoading","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","event","target","value","className","styles","onSubmit","preventDefault","find","contact","toLowerCase","alert","addContact","type","placeholder","pattern","title","required","onChange","Button","fullWidth","variant","sx","mt","mb","ml","color","background","ContactFilter","e","changeFilterAction","ContactList","rendered","normalizedFilter","includes","filteredContacts","map","onClick","deleteContact","Component","navigateTo","props","isLoggedIn","selectIsLoggedIn","isRefreshing","selectIsRefreshing","to","WithAuthRedirect","loading","contactsAdd","useEffect","fetchContacts","length","Loader"],"sourceRoot":""}